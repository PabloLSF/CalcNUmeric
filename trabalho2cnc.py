# -*- coding: utf-8 -*-
"""Trabalho2CNC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fFl06Q6-bR7C65TQVPYDENhBBKOWAyeH
"""

import numpy as np
from numpy import *
from __future__ import division  
import scipy
import scipy.linalg
import matplotlib.pyplot as plt

"""# **Algoritmo 1 - Eliminação de Gauss**"""

def eleminaGauss (mat, n,b):
  val_det = 1
  mat = mat.astype('double')  
  for i in range(n):
        for j in range(i + 1, n):
            if mat[i][i]==0:
                t=0
            else:
                t = mat[j][i] / mat[i][i]
            for k in range(i + 1, n):
                mat[j][k] -= t * mat[i][k]
            b[j] = b[j] - t * b[i]
            mat[j][i] = 0
        val_det *= mat[i][i]
  return val_det

"""# **Algoritmo 2 - Fatoração LU**"""

#Decomposição LU
def LU(x,p):
    dim=np.shape(x)
    det=1 
    lower=np.identity(dim[0])  
    for j in range(0,dim[1]):
        for i in range(j,dim[0]):  
            if(i == j and x[i,j]==0 and i!=dim[1]-1): 
                p=-2  
                k=i
                while p!=k and k<dim[1]-1: 
                    if x[k,j]!=0:
                        p=k 
                    else:
                        k+=1
                if p==-2:
                    return("Determinante = 0 (Matriz singular)")
                else:
                    x[i,],x[p,]=x[p,].copy(),x[i,].copy() 
                    det=(-1)*det
            elif(i!=j): 
                xt0=x[j,j] 
                xt1=x[i,j]
                ft=xt1/xt0
                x[i,:]=x[i,:]-x[j,:]*ft
                lower[i,j]=ft
        det=det*x[j,j] 
    print ("U=")
    for i in range(len(x)): 
      for j in range(len(x)):
        print("|",round(x[i][j],p), end="")
      print ("")
    print ("L=")
    for i in range(len(lower)): 
      for j in range(len(lower)):
        print("|",round(lower[i][j],p), end="")
      print ("")
    print ("LU =")
    for i in range(len(np.dot(lower,x))): 
      for j in range(len(np.dot(lower,x))):
        print("|",round(np.dot(lower,x)[i][j],p), end="")
      print ("")
    print ("= X")
    
    print ("Determinante =",round(det,p))

"""# **Algoritmo 3 - Choleski**"""

#Choleski
def cholesky(A,n,p):
   soma=0  
   det=1
   vet= [[0.0] * n for i in range(n)] 
   
   for i in range(n):
        for k in range(i+1):         
           soma =round( sum(vet[i][j] * vet[k][j] for j in range(k)),p)          
           if (i == k): 
               vet[i][k] = round(sqrt(A[i][i] - soma),p)
               if soma>0:
                 det=round((det*soma),p)
               
           else:               
               vet[i][k] =round( (1.0 / vet[k][k] * (A[i][k] - soma)),p)
              
          
   return (vet,det)

"""# **Lista-6**"""

#Questão 1 – Eliminação de Gauss
#a)
A = np.array([[-2,3,1],[2, 1,-4],[7,10,-6]])   
b = np.array([-5,-9,2])
n=3
print("A) Mtriz inicial completa")
for i in range(n):
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i])
ret=eleminaGauss (A,n,b)
print(" A) Mtriz com eleminação de completa")
for i in range(n): 
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i]) 
print("A) Determinante ",  end="")  
print(ret)
#B
A = np.array([[1,-3,5,6],[-9, 4,-1,0],[3,2,-2,7],[1,2,5,-4]])   
b = np.array([17,29,-11,7])
n=4
print("B) Mtriz inicial completa")
for i in range(n):
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i])
ret=eleminaGauss (A,n,b)
print(" B) Mtriz com eleminação de completa")
for i in range(n): 
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i]) 
print("B) Determinante ",  end="")  
print(ret)
#C
A = np.array([[-2,3,1,5],[5,1,-1,0],[1,6,3,-1],[4,5,2,8]])   
b = np.array([2,-1,0,6])
n=4
print("C) Mtriz inicial completa")
for i in range(n):
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i])
ret=eleminaGauss (A,n,b)
print(" C) Mtriz com eleminação de completa")
for i in range(n): 
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i]) 
print("C) Determinante ",  end="")  
print(ret)
#D
A = np.array([[0,1,3,2,4],[8,-2,9,-1,2],[5,1,1,7,2],[-2,4,5,1,0],[7,-3,2,-4,1]])   
b = np.array([3,-5,6,-1,8])
n=5
print("D) Mtriz inicial completa")
for i in range(n):
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i])
ret=eleminaGauss (A,n,b)
print(" D) Mtriz com eleminação de completa")
for i in range(n): 
  for j in range(n):
      print("|",A[i][j], end="")
  print("|",b[i]) 
print("D) Determinante ",  end="")  
print(ret)

#Questão 2 – Decomposição LU

#A)
A = np.array([[4,-1,3,8],[1,6,2,-3],[5,5,1,0],[2,4,-2,1]])  
a = np.array([43,7,8,8])
print("A)")
LU(A,4)
#B)
B = np.array([[3,-2,-1,7,3],[-1,1,3,-2,-3],[8,4,-1,0,2],[2,-3,2,5,0],[-1,3,0,-8,-2]])  
b = np.array([45,-8,-18,0])
print("B)")
LU(B,5)
#C)
C = np.array([[4,12,14,5,2,-1],[1,-3,12,2,3,-2],[-2,4,10,10,-2,0],[7,-3,-5,12,8,10],[10,7,1,8,12,-8],[8,10,0,11,-2,15]])  
c = np.array([102,105,-67,18,100,-90])
print("C)")
LU(C,8)

#Questão 3 – Decomposição cholesky
# A)
A = np.array([[9,-6,3],[-6,29,-7],[3,-7,18]])  
a = np.array([-3,-8,33])
n=3
p=4
vet,det = cholesky(A,n,p)
print ("A):",vet)
print ("A):",det)
#B
B = np.array([[4,-2,4,10],[-2,3,-1,-7],[4,-1,14,11],[11,-7,11,31]])   
b = np.array([2,2,-1,-2])
p=5
n=4
vet,det = cholesky(B,n,p)
print ("B):",vet)
print ("B):",det)
#C
C = np.array([[1,2,-3,0,3],[2,5,-1,1,4],[-3,-1,50,1,-19],[0,1,1,6,0],[3,4,-19,0,39]])
c = np.array([17,41,-45,30,51])
p=5
n=5
vet,det = cholesky(C,n,p)
print ("C):",vet)
print ("C):",det)

"""# **Algoritmo 4 -  Gauss-Seidel**"""

def gauss_seidel(A,b,x0,tol,N):  
   
    A = A.astype('double')  
    b = b.astype('double')  
    x0 = x0.astype('double')  
    vet_x1=[x0[0,0]]
    vet_x2=[x0[1,0]]

    n=np.shape(A)[0]  
    x = np.copy(x0)  
    it = 0  
    
    while (it < N):  
        it = it+1  
      
        for i in np.arange(n):  
            x[i] = b[i]  
            for j in np.concatenate((np.arange(0,i),np.arange(i+1,n))):  
                x[i] -= A[i,j]*x[j]  
            x[i] /= A[i,i]
            vet_x1.append(x[0])
            vet_x2.append(x[1])

        
        if (np.linalg.norm(x-x0,np.inf) < tol): 
            reta1_x = [0,0]
            reta2 = [0,0]
           
            reta1_x[0] = (b[0] - (-5*A[0, 1]))/A[0,0]
            reta1_x[1]= (b[1] - (5* A[0, 1]))/A[0,0]
            reta_y = [-5,5]
            
            reta2[0] = (b[0]*A[1,0])/A[1,1]
            reta2[1] =  (b[1]*A[1,0])/A[1,1]

            plt.plot(reta1_x,reta_y, reta2, reta_y)

            plt.plot(vet_x1, vet_x2, 'ro')
            plt.title("Resultados Seidel")
            plt.show()
            return x  
        
        x0 = np.copy(x)  
    print("num. max. de iteracoes excedido")

"""# **Algoritmo 5- Gauss-Jacobi**"""

def jacobi(A,b,x0,tol,N):  
    
    A = A.astype('double')  
    b = b.astype('double')  
    x0 = x0.astype('double') 
    vet_x1=[x0[0,0]]
    vet_x2=[x0[1,0]]


    n=np.shape(A)[0]  
    x = np.copy(x0)  
    it = 0  
     
    while (it < N):  
        it = it+1  
          
        for i in np.arange(n):  
            x[i] = b[i]  
            for j in np.concatenate((np.arange(0,i),np.arange(i+1,n))):  
                x[i] -= A[i,j]*x0[j]  
            x[i] /= A[i,i]
            vet_x1.append(x[0])
            vet_x2.append(x[1])
       
        if (np.linalg.norm(x-x0,np.inf) < tol):  
            reta1_x = [0,0]
            reta2 = [0,0]
           
            reta1_x[0] = (b[0] - (-5*A[0, 1]))/A[0,0]
            reta1_x[1]= (b[1] - (5* A[0, 1]))/A[0,0]
            reta_y = [-5,5]
           
            reta2[0] = (b[0]*A[1,0])/A[1,1]
            reta2[1] =  (b[1]*A[1,0])/A[1,1]

            plt.plot(reta1_x,reta_y, reta2, reta_y)
            plt.plot(vet_x1, vet_x2, 'ro')            
            plt.title("Resultados Jacobi")
            plt.show()
            return x  
          
        x0 = np.copy(x)  
    print("num. max. de iteracoes excedido")

"""# **Lista-5**"""

#a) x1 + x2 = 3
#x1 – 3 x2 = -3

A = np.array([[1,1],[1, -3]])        

a= np.array([[3],[-3]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = jacobi(A, a ,x0, tol, N)
print(x)
y = gauss_seidel(A, a, x0, tol, N)
print(y)

#b) x1 – 3 x2 = -3
#x1 + x2 = 3
B= np.array([[1,-3],[1, 2]])        

b = np.array([[3],[-3]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])
x = jacobi(B, b ,x0, tol, N)
print(x)
y = gauss_seidel(B, b, x0, tol, N)
print(y)

#c) 2x1 + 5x2 = -3
#3x1 + x2 = 2
C= np.array([[2,5],[3,1]])        

c= np.array([[-3],[2]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = jacobi(C ,c,x0, tol, N)
print(x)
y = gauss_seidel(C,c ,x0, tol, N)
print(y)

#d) 3x1 + x2 = 2
#2x1 + 5x2 = -3
D= np.array([[3,1],[2,5]])        

d= np.array([[2],[-3]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = jacobi(D ,d,x0, tol, N)
print(x)
y= gauss_seidel(D,d, x0, tol, N)
print(y)

"""# **Algoritmo 6- Newton**"""

def Newton(A,b,x0,tol,N):
  
  #1° etapa jacob
  mat =jacobi(A,b,x0,tol,N)
  n=len(mat)-1
  #eleminção de Gaus 
  for i in range(n):
        for j in range(i + 1, n):
            if mat[i][i]==0:
                t=0
            else:
                t = mat[j][i] / mat[i][i]
            for k in range(i + 1, n):
                mat[j][k] -= t * mat[i][k]
            b[j] = b[j] - t * b[i]
            mat[j][i] = 0
  
 
  
     
  
  return mat

"""# **Lista-7**"""

#a) x2 + y2 + z3 = 9
#x . y . z = 1
#x + y - z2 = 0
A= np.array([[1,1,1],[1,1,1],[1,1,-1]])        

a= np.array([[9],[1],[0]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = Newton(A ,a,x0, tol, N)
print(x)

#b) x3 + 3y2 = 21
#x2 + 2y = -2
B= np.array([[1,3],[1,2]])        

b= np.array([[21],[-2]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = Newton(D ,d,x0, tol, N)
print(x)

#c) x2 + xy3 = 9
#3x2y - y3 = 4
C=np.array([[1,1],[3,1]])        

c= np.array([[9],[4]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = Newton(C ,c,x0, tol, N)
print(x)

#d) 3x2 + y = 3.5
#x + y3 = 1,625
D= np.array([[3,1],[1,1]])        

d= np.array([[3.5],[1.625]])
tol = 0.001
N = 25
x0 = np.array([[0], [0]])

x = Newton(D ,d,x0, tol, N)
print(x)