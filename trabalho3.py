# -*- coding: utf-8 -*-
"""trabalho3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_a7CFVFRKtGD0trw6gzcpzJYT4j3PhZM
"""

import numpy as np
from numpy import *
from __future__ import division  
import scipy
import scipy.linalg
import matplotlib.pyplot as plt

"""# **Algoritmo 1 - Lagrange**"""

#pseudo codigo
def lagrande (m,x,y,z):
  r=int(0)
 
  for i in range(m):
    c=1
    d=1
    for j in range(m):
      if(i!=j):
        c=c*(z-x[j])
        d=d*(x[i]-x[j])
    r=r+y[i]*(c/d)
  
  return r

"""# **Algoritmo 2 -  Newton**"""

#pseudo codigo
def newton (m,x,y,z):
 
  dely = y.copy()
  

 
  for t in range(1,m):
    for f in range(m,t,-1):
      
      dely[f-1]=(dely[f-1]-dely[f-1-1])/(x[f-1]-x[f-1-t])
  
  r=dely[m-1]

  for f in range(m-1,0,-1):
    r=r*(z-x[f-1])+dely[f-1]
  
  return r

"""# **Lista - 8**"""

y=[179323000,203302000,226542000,249633000,281422000,308746000]
x=[1960,1970,1980,1990,2000,2010]
a=[1+(1/4),(1/4),(1/2),1]
b=[119.4,25.2,49.2,36.4]
dia=[0,6,10,13,17,20,28]
am1=[6.67,17.33,42.67,37.33,30.10,29.31,28.74]
media1=(6.67+17.33+42.67+37.33+30.10+29.31+28.74)/7
am2=[6.67,16.11,18.89,15,10.56,9.44,8.89]
media2=(6.67+16.11+18.89+15+10.56+9.44+8.89)/7

print("Lista 8 ")
print("Questão 1")
print("lagrande")
r1=lagrande (6,x,y,1950)
print("resultado 1",r1)
erro1=int(abs(r1-150697360))
print("Erro para 1950 ",erro1)
r2=lagrande (6,x,y,1975)
print("resultado 2 ",r2)
r3=lagrande (6,x,y,2014)
print("resultado 3",r3)
erro3=int(abs(r3-317298000))
print("erro para 2014 ",erro3)
r4=lagrande (6,x,y,2020)
print("resultado 4",r4)
print("Questão 2")
print("lagrande")
exp1=lagrande (7,am1,dia,media1)
exp2=lagrande (7,am2,dia,media2)
print("A curva de peso  medio para amostra 1: ",exp1)
print("A curva de peso  medio para amostra 2: ",exp2)

print("Lista 8 ")
print("Questão 1")
print("newton")
r1=newton (6,x,y,1950)
print("resultado 1",r1)
erro1=int(abs(r1-150697360))
print("Erro para 1950 ",erro1)
r2=newton (6,x,y,1975)
print("resultado 2 ",r2)
r3=newton (6,x,y,2014)
print("resultado 3",r3)
erro3=int(abs(r3-317298000))
print("erro para 2014 ",erro3)
r4=newton (6,x,y,2020)
print("resultado 4",r4)
print("Questão 2")
print("newton")
ca=newton(4,a,b,(3/4))
print("resultado para 3/4 de milha: ",ca)
erro=int(abs(ca-73))
print("erro para 3/4 de milhas ",erro)

"""# **Spline Natural**"""

def spline(n,x,y):
  e=[z for z in range(n)]
  d=[z for z in range(n)]
  s2=[z for z in range(n)]
  if (n<3):
    info=-1
    return info
  ordenada=True
  for i in range(1,n):
    ordenada= ordenada and (x[i-1]<x[i])
  if(not ordenada):
    info=-2
    return info
  info=0
  m=n-2
  ha=x[2]-x[1]
  deltaA=(y[2]-y[1])/ha
  for i  in range (m):
    ip1=i+1
    ip2=i+2
    hb=x[ip2]-x[ip1]
    deltaB=(y[ip2]-y[ip1]/hb)
    e[i]=hb
    d[i]=2*(ha+hb)
    s2[ip1]=6*(deltaB-deltaA)
    ha=hb
    deltaA=deltaB
  for i in range(1,m):
    ip1=i+1
    im1=i-1
    t=e[im1]/d[im1]
    d[i]=d[i]-t*e[im1]
    s2[ip1]=s2[ip1]-t*s2[i]
  s2[m+1]=s2[m+1]/d[m]
  for i in range(m,2,-1):
    ip1=i+1
    im1=i-1
    s2[i]=(s2[i]-e[im1]*s2[ip1])/d[im1]
  s2[0]=0
  s2[n-1]=0          
  return s2

"""# **Lista 9**"""

print("Lista 9 ")
print("Questão 1")
print("Spline")
x=[8.3,8.6]
fx=[17.56492,18.50515]
a=spline(2,x,fx)
print("Spline a plicada para o exercico a)",a)
x=[0.8,1]
fx=[0.22363362,0.65809197]
b=spline(2,x,fx)
print("Spline a plicada para o exercico b)",b)
x=[-0.5,-0.25,0]
fx=[-0.0247500,0.3349375,1.101]
c=spline(3,x,fx)
print("Spline a plicada para o exercico c)",c)
x=[0.1,0.2,0.3,0.4]
fx=[-0.62049958,-0.28398668,0.00660095,0.24842440]
d=spline(4,x,fx)
print("Spline a plicada para o exercico d)",d)
print("questão 2")
x=[8.3,8.4,8.6]
fx=[17.56492,17.87714,18.50515]
a=spline(3,x,fx)
print("Spline a plicada para o exercico a)",a)
x=[0.8,0.9,1]
fx=[0.22363362,0.44359243,0.65809197]
b=spline(3,x,fx)
print("Spline a plicada para o exercico b)",b)
x=[-0.5,-0.33,-0.25,0]
fx=[-0.0247500,0.6293541,0.3349375,1.101]
c=spline(4,x,fx)
print("Spline a plicada para o exercico c)",c)
x=[0.1,0.2,0.25,0.3,0.4]
fx=[-0.62049958,-0.28398668,0.2480494168,0.00660095,0.24842440]
d=spline(5,x,fx)
print("Spline a plicada para o exercico d)",d)

"""# **MMQ**"""

def mmq (vetorX, vetorY, grau):
	tamVetor = len(vetorX)

	
	sumA = 0.0 #x
	sumB = 0.0 #y
	sumX_Y = 0.0 #x*y
	sumX2_Y = 0.0 #x^2*y
	sumX3_Y = 0.0 #x^3*y
	sumX4_Y = 0.0 #x^4*y
	sumX5_Y = 0.0 #x^5*y
	sumX_2 = 0.0 #x^2
	sumX_3 = 0.0 #x^3
	sumX_4 = 0.0 #x^4
	sumX_5 = 0.0 #x^5
	sumX_6 = 0.0 #x^6
	sumX_7 = 0.0 #x^7
	sumX_8 = 0.0 #x^8
	sumX_9 = 0.0 #x^9
	sumX_10 = 0.0 #x^10
	sumY_2 = 0.0#y^2

	for i in range (tamVetor):
		sumA = sumA + vetorX[i]
		sumX_2 = sumX_2 + (vetorX[i]**2)
		sumX_3 = sumX_3 + (vetorX[i]**3)
		sumX_4 = sumX_4 + (vetorX[i]**4)
		sumX_5 = sumX_5 + (vetorX[i]**5)
		sumX_6 = sumX_6 + (vetorX[i]**6)
		sumX_7 = sumX_7 + (vetorX[i]**7)
		sumX_8 = sumX_8 + (vetorX[i]**8)
		sumX_9 = sumX_9 + (vetorX[i]**9)
		sumX_10 = sumX_10 + (vetorX[i]**10)
		sumB =  sumB + vetorY[i]
		sumY_2 = sumY_2 + (vetorY[i]**2)
		sumX_Y =  sumX_Y + (vetorY[i]* vetorX[i])
		sumX2_Y =  sumX2_Y + (vetorY[i]* (vetorX[i]**2))
		sumX3_Y =  sumX3_Y + (vetorY[i]* (vetorX[i]**3))
		sumX4_Y =  sumX4_Y + (vetorY[i]* (vetorX[i]**4))
		sumX5_Y =  sumX5_Y + (vetorY[i]* (vetorX[i]**5))

	if grau == 1:
		A = np.array ([[tamVetor, sumA],
						[sumA, sumX_2]])
		Y = np.array([sumB, sumX_Y])

	elif grau == 2:
		A = np.array([[tamVetor, sumA, sumX_2],
					[sumA, sumX_2, sumX_3],
					[sumX_2, sumX_3, sumX_4]])
		Y = np.array([sumB, sumX_Y, sumX2_Y])

	elif grau == 3:
		A = np.array([[tamVetor, sumA, sumX_2, sumX_3],
					[sumA, sumX_2, sumX_3, sumX_4],
					[sumX_2, sumX_3, sumX_4, sumX_5],
					[sumX_3, sumX_4, sumX_5, sumX_6]])
		Y = np.array([sumB, sumX_Y, sumX2_Y, sumX3_Y])

	elif grau == 4:
		A = np.array([[tamVetor, sumA, sumX_2, sumX_3, sumX_4],
					[sumA, sumX_2, sumX_3, sumX_4, sumX_5],
					[sumX_2, sumX_3, sumX_4, sumX_5, sumX_6],
					[sumX_3, sumX_4, sumX_5, sumX_6, sumX_7],
					[sumX_4, sumX_5, sumX_6, sumX_7, sumX_8]])
		Y = np.array([sumB, sumX_Y, sumX2_Y, sumX3_Y, sumX4_Y])
		
	elif grau == 5:
		A = np.array([[tamVetor, sumA, sumX_2, sumX_3, sumX_4, sumX_5],
					[sumA, sumX_2, sumX_3, sumX_4, sumX_5, sumX_6],
					[sumX_2, sumX_3, sumX_4, sumX_5, sumX_6, sumX_7],
					[sumX_3, sumX_4, sumX_5, sumX_6, sumX_7, sumX_8],
					[sumX_4, sumX_5, sumX_6, sumX_7, sumX_8, sumX_9],
					[sumX_5, sumX_6, sumX_7, sumX_8, sumX_9, sumX_10]])
		Y = np.array([sumB, sumX_Y, sumX2_Y, sumX3_Y, sumX4_Y, sumX5_Y])
	
	else:
		print("Grau indefinido!")
		exit(1)

	A_inversa = np.linalg.inv(A)	
	X = np.dot(A_inversa, Y)
	return X

"""# **Lista 10**"""

#questão Um
print("Lista 10")
print("Questão 1")
C=[1,2,4,6,9,12]
A=15
T=[20,7.5,6.5,7,10,A]
Grau=2
quest1=mmq(C,T,Grau)
print("A=15: ",quest1)
plt.plot(quest1)
plt.title('Questão 1 A=15')
plt.show()
C=[1,2,4,6,9,12]
A=20
T=[20,7.5,6.5,7,10,A]
Grau=2
quest1=mmq(C,T,Grau)
print("A=20: ",quest1)
plt.plot(quest1)
plt.title('Questão 1 A=20')
plt.show()
C=[1,2,4,6,9,12]
A=25
T=[20,7.5,6.5,7,10,A]
Grau=2
quest1=mmq(C,T,Grau)
print("A=25: ",quest1)
plt.plot(quest1)
plt.title('Questão 1 A=25')
plt.show()
print("Questão 2")
p=[28  ,25  ,28  ,28  ,28  ,33  ,28  ,29  ,23  ,27  ]
m=[3.84,3.21,3.23,3.63,3.75,3.20,3.41,3.38,3.53,2.03]
Grau=1
quest2=mmq(p,m,Grau)
print("Questão 2.1 : ",quest2)
plt.plot(quest2)
plt.title('Questão 2.1 :')
plt.show()
p=[29  ,28  ,27  ,29  ,21  ,28  ,28  ,26  ,30  ,24  ]
m=[3.75,3.65,3.87,3.75,1.66,3.12,2.96,2.92,3.10,2.81]
Grau=1
quest2=mmq(p,m,Grau)
print("Questão 2.2 : ",quest2)

plt.plot(quest2)
plt.title('Questão 2.2 :')
plt.show()
print("Questão 3")
p=[13,15,16,21,22,23,25]
m=[11,10,11,12,12,13,13]
Grau=1
quest3=mmq(p,m,Grau)
print("Questão 3.1 : ",quest3)
plt.plot(quest3)
plt.title('Questão 3.1 :')
plt.show()
p=[29,30,31,36,40,42,55]
m=[12,14,16,17,13,14,22]
Grau=1
quest3=mmq(p,m,Grau)
print("Questão 3.2 : ",quest3)
plt.plot(quest3)
plt.title('Questão 3.2 :')
plt.show()
p=[60,62,64,70,72,100,130]
m=[14,21,21,24,17,23,34]
Grau=1
quest3=mmq(p,m,Grau)
print("Questão 3.3 : ",quest3)
plt.plot(quest3)
plt.title('Questão 3.3 :')
plt.show()